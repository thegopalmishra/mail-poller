version: "2.2"

services:

  activemq:
    container_name: activemq
    image: webcenter/activemq:latest
    ports:
      # mqtt
      - "1883:1883"
      # amqp
      - "5672:5672"
      # ui
      - "8161:8161"
      # stomp
      - "61613:61613"
      # ws
      - "61614:61614"
      # jms
      - "61616:61616"
    networks: [backing-services]
    volumes: ["activemq-data:/opt/activemq/conf", "activemq-data:/data/activemq", "activemq-data:/var/log/activemq"]
    environment:
      ACTIVEMQ_REMOVE_DEFAULT_ACCOUNT: "true"
      ACTIVEMQ_ADMIN_LOGIN: admin
      ACTIVEMQ_ADMIN_PASSWORD: password
      ACTIVEMQ_WRITE_LOGIN: write
      ACTIVEMQ_WRITE_PASSWORD: password
      ACTIVEMQ_READ_LOGIN: read
      ACTIVEMQ_READ_PASSWORD: password
      ACTIVEMQ_JMX_LOGIN: jmx
      ACTIVEMQ_JMX_PASSWORD: password
      ACTIVEMQ_STATIC_TOPICS: static-topic-1;static-topic-2
      ACTIVEMQ_STATIC_QUEUES: static-queue-1;static-queue-2
      ACTIVEMQ_ENABLED_SCHEDULER: "true"
      ACTIVEMQ_MIN_MEMORY: 512
      ACTIVEMQ_MAX_MEMORY: 2048

  docker-mysql:
    restart: always
    container_name: docker-mysql
    image: mysql
    networks: [backing-services]
    environment:
      MYSQL_DATABASE: mailpoller
      MYSQL_ROOT_PASSWORD: 'Temp@12345'
      MYSQL_ROOT_HOST: '%'
    volumes:
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "3307:3306"
    healthcheck:
      test: "/usr/bin/mysql --user=root --password='Temp@12345'--execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

  mail-poller:
      restart: on-failure
      build: ./
      networks: [backing-services]
      expose:
        - "8081"
      ports:
        - 8081:8080
      environment:
        WAIT_HOSTS: mysql:3306
        SPRING_DATASOURCE_URL: jdbc:mysql://docker-mysql:3306/mailpoller?autoReconnect=true&useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
        SPRING_ACTIVEMQ_BROKER-URL: tcp://activemq:61616
      depends_on:
        - docker-mysql
        - activemq

volumes:
  activemq-data: {}
  sql: {}

networks:
  backing-services:
    driver: bridge

